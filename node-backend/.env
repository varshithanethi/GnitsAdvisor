const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');
const OpenAI = require('openai');
const axios = require('axios');
require('dotenv').config();PG_PORT=5432

const app = express();FLASK_URL=http://localhost:8080

// Middlewarek-proj-jpZ4ZsWl6qQQz0cCSp1Mjwv6NqpEwd70YpR5q-VeHdu_89in6rwlJKtq98RR3aMcRRUxarSNStT3BlbkFJZdOynmppElB2dat9USwCfGOpBAR968cfVrLd3Tj3r6MCwcrmSaeWRduacodfM9CinQ3fxQ0tEAapp.use(cors());app.use(express.json());// Initialize OpenAI with API keyconst openai = new OpenAI({    apiKey: process.env.OPENAI_API_KEY});// PostgreSQL connectionconst pool = new Pool({    user: process.env.PG_USER,    password: process.env.PG_PASSWORD,    host: process.env.PG_HOST,    database: process.env.PG_DATABASE,    port: process.env.PG_PORT});// Add Flask backend URLconst FLASK_URL = process.env.FLASK_URL || 'http://localhost:8080';// Add proxy route for Flask endpointsapp.use('/flask-api', async (req, res) => {    try {        const flaskResponse = await axios({            method: req.method,            url: `${FLASK_URL}${req.path}`,            data: req.body,            headers: req.headers        });        res.json(flaskResponse.data);    } catch (error) {        console.error('Flask proxy error:', error);        res.status(500).json({ error: 'Flask service error' });    }});// Health check routeapp.get('/api/health', (req, res) => {    res.json({ status: 'healthy', timestamp: new Date() });});// GPT-powered chat endpointapp.post('/api/chat-gpt', async (req, res) => {    try {        const { message, user_type } = req.body;        // Create GNITS-specific context        const systemPrompt = `You are GNITS Assistant, a helpful chatbot for G. Narayanamma Institute of Technology & Science.            You're speaking with a ${user_type}.             Provide accurate, relevant information about GNITS.            Use formal language and be concise.`;        const completion = await openai.chat.completions.create({            model: "gpt-3.5-turbo",            messages: [                { role: "system", content: systemPrompt },                { role: "user", content: message }            ],            temperature: 0.7,            max_tokens: 500        });        const gptResponse = completion.choices[0].message.content;        // Store conversation in PostgreSQL        await pool.query(            'INSERT INTO chat_messages (user_type, message, response, timestamp) VALUES ($1, $2, $3, CURRENT_TIMESTAMP)',            [user_type, message, gptResponse]        );        res.json({            status: 'success',            response: gptResponse,
            timestamp: new Date()
        });

    } catch (error) {
        console.error('Error:', error);
        res.status(500).json({
            status: 'error',
            message: 'Failed to process chat request',
            error: error.message
        });
    }
});

// Start server
const PORT = process.env.NODE_PORT || 3001;
app.listen(PORT, () => {
    console.log(`Node.js server running on port ${PORT}`);
    console.log('GPT integration active');
    console.log('PostgreSQL connection configured');
});